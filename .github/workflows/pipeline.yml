name: Pipeline techlanches-auth

on:
  push:
    branches:
      - main
  pull_request:
    branches:
        - main
  workflow_dispatch:

jobs:

##############################################################
  build-and-test:
   runs-on: ubuntu-latest
   
   steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.x
        
    - name: Restore NuGet packages (Main Project)
      run: dotnet restore src/Serverless/**/*.csproj
  
    - name: Build
      run: dotnet build src/Serverless/**/*.csproj

    - name: Restore NuGet packages (Test Project)
      run: dotnet restore TechLanchesLambdaTest/*.csproj 
      
    - name: Test
      run: dotnet test TechLanchesLambdaTest/*.csproj --no-restore --verbosity normal

##############################################################
  build-sonar:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner          

      - name: Install Coverlet
        run: dotnet tool install --global coverlet.console

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GTH_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: | 
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"g12-4soat_techlanches-auth" /o:"g12-4soat" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=TechLanchesLambdaTest/coverage.opencover.xml
          dotnet build LambdaAuth.sln --configuration Release
          dotnet test TechLanchesLambdaTest/*.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Get current analysisId
        id: get-analysis-id
        run: |
          ANALYSIS_ID=$(curl -s "https://sonarcloud.io/api/ce/component?component=g12-4soat_techlanches-auth" | jq -r '.current.analysisId')
          echo "::set-output name=analysis-id::$ANALYSIS_ID"

      - name: Check SonarCloud Quality Gate status
        id: sonarcloud-quality-gate-check
        run: |
          ANALYSIS_ID=${{ steps.get-analysis-id.outputs.analysis-id }}
          STATUS=$(curl -s "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "SonarCloud Quality Gate check failed. Aborting workflow."
            exit 1
          fi

##############################################################
  deploy:
     #if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/main'
     needs: build-sonar
     runs-on: ubuntu-latest
     steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
          
      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:          
          aws-region: 'us-east-1'
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  
      - name: Configure AWS Dotnet CLI
        run: dotnet tool install -g Amazon.Lambda.Tools
        
      - name: Restore NuGet packages
        run: dotnet restore src/Serverless/**/*.csproj
    
      - name: Build
        run: dotnet build src/Serverless/**/*.csproj --no-restore
  
      - name: Prepare package
        run: dotnet lambda package --project-location  src/Serverless/**/ --output-package auth_lambda.zip --configuration Release --framework net8.0
  
      - name: Deploy to AWS Lambda auth
        run: aws lambda update-function-code --function-name tech-lanches-lambda-auth --zip-file fileb://./auth_lambda.zip
      
      - name: Deploy to AWS Lambda cadastro
        run: aws lambda update-function-code --function-name tech-lanches-lambda-cadastro --zip-file fileb://./auth_lambda.zip
